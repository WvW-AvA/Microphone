(undo-tree-save-format-version . 1)
"deb00a6f8c18f4173fdf5ec3e61f716489bf53ed"
[nil nil nil nil (25315 37450 794554 578000) 0 nil]
([nil nil ((#("	" 0 1 (fontified t)) . 6603) (t 25315 37226 477269 14000)) nil (25315 37450 794553 316000) 0 nil])
([nil nil ((#("		//usart1_UART_RxBuffer[++usart1_UART_Rx_Cnt] = usart1_RxBuffer;  
" 0 2 (fontified t) 2 4 (fontified t face font-lock-comment-delimiter-face) 4 68 (fontified t face font-lock-comment-face)) . 6674)) nil (25315 37450 794551 849000) 0 nil])
([nil nil ((#("//	printf(\"ubuffer0: %d\\r\\n\",usart1_RxBuffer[0]);
" 0 1 (c-in-sws t c-is-sws t fontified t ws-butler-chg delete face font-lock-comment-delimiter-face) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 3 49 (c-in-sws t fontified t face font-lock-comment-face) 49 50 (c-in-sws t fontified t face font-lock-comment-face)) . 6674) (undo-tree-id34 . -49)) nil (25315 37450 794550 691000) 0 nil])
([nil nil ((#("//	printf(\"ubuffer1: %d\\r\\n\",usart1_RxBuffer[1]);
" 0 1 (fontified t c-is-sws t ws-butler-chg delete c-in-sws t face font-lock-comment-delimiter-face) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 3 49 (c-in-sws t fontified t face font-lock-comment-face) 49 50 (c-in-sws t fontified t face font-lock-comment-face)) . 6674) (undo-tree-id33 . -49)) nil (25315 37450 794548 967000) 0 nil])
([nil nil ((#("//	printf(\"ubuffer2: %d\\r\\n\",usart1_RxBuffer[2]);
" 0 1 (fontified t c-is-sws t ws-butler-chg delete c-in-sws t face font-lock-comment-delimiter-face) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 3 49 (c-in-sws t fontified t face font-lock-comment-face) 49 50 (c-in-sws t fontified t face font-lock-comment-face)) . 6674) (undo-tree-id32 . -49)) nil (25315 37450 794547 302000) 0 nil])
([nil nil ((#("//	printf(\"ubuffer3: %d\\r\\n\",usart1_RxBuffer[3]);
" 0 1 (fontified t c-is-sws t ws-butler-chg delete c-in-sws t face font-lock-comment-delimiter-face) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 3 49 (c-in-sws t fontified t face font-lock-comment-face) 49 50 (c-in-sws t fontified t face font-lock-comment-face)) . 6674)) nil (25315 37450 794545 357000) 0 nil])
([nil nil ((#("		++usart1_RxBufferLen;
" 0 24 (fontified t)) . 6650) (undo-tree-id29 . -24) (undo-tree-id30 . -24) (undo-tree-id31 . -24)) nil (25315 37450 794544 9000) 0 nil])
([nil nil ((#("		
" 0 3 (fontified t)) . 7396)) nil (25315 37450 794540 528000) 0 nil])
([nil nil ((#("	  if(usart1_RxBufferLen == 4 && usart1_RxBuffer[0]=='x')
	  {
		  for(int i=1;i<4;i++)
		  {
			  usart1_TransBuffer[i-1]=usart1_RxBuffer[i];
		  }
		  usart1_TransBuffer[3] = '\\0';
			sscanf(usart1_TransBuffer, \"%d\", &receive_x);
		  printf(\"x:    %d\\r\\n\",receive_x);
		  //send_L_angle(receive_x);
			usart1_RxBufferLen = 0;
	  }
	  else if(usart1_RxBufferLen == 4 && usart1_RxBuffer[0]=='y')
	  {
		  for(int i=1;i<4;i++)
		  {
  			usart1_TransBuffer[i-1]=usart1_RxBuffer[i];
	  	}
		  usart1_TransBuffer[3] = '\\0';
			sscanf(usart1_TransBuffer, \"%d\", &receive_x);
	  	printf(\"y:    %d\\r\\n\",receive_y);
		  //send_H_angle(receive_y);
			usart1_RxBufferLen = 0;
	  }
	  printf(\"outit\\r\\n\");
	  HAL_UART_Receive_IT(&huart1,usart1_RxBuffer,4);
		if (usart1_RxBufferLen >= 4) printf(\"panic\\r\\n\");
" 0 1 (fontified t c-is-sws t ws-butler-chg delete) 1 3 (c-in-sws t fontified t) 3 4 (c-is-sws t fontified t face font-lock-keyword-face) 4 5 (fontified t face font-lock-keyword-face) 5 53 (fontified t) 53 56 (fontified t face font-lock-string-face) 56 57 (fontified t) 57 58 (fontified t) 58 67 (fontified t) 67 70 (fontified t face font-lock-keyword-face) 70 71 (fontified t) 71 73 (fontified t face font-lock-type-face) 73 74 (fontified t c-type c-decl-id-start face font-lock-type-face) 74 75 (fontified t) 75 76 (fontified t face font-lock-variable-name-face) 76 177 (fontified t) 177 181 (fontified t face font-lock-string-face) 181 213 (fontified t) 213 217 (fontified t face font-lock-string-face) 217 243 (fontified t) 243 257 (fontified t face font-lock-string-face) 257 270 (fontified t) 270 274 (c-in-sws t c-is-sws t fontified t) 274 275 (c-in-sws t c-is-sws t fontified t face font-lock-comment-delimiter-face) 275 276 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 276 301 (c-in-sws t fontified t face font-lock-comment-face) 301 304 (c-is-sws t c-in-sws t fontified t) 304 305 (c-is-sws t fontified t) 305 336 (fontified t) 336 340 (fontified t face font-lock-keyword-face) 340 341 (fontified t) 341 343 (fontified t face font-lock-keyword-face) 343 391 (fontified t) 391 394 (fontified t face font-lock-string-face) 394 405 (fontified t) 405 408 (fontified t face font-lock-keyword-face) 408 409 (fontified t) 409 411 (fontified t face font-lock-type-face) 411 412 (fontified t c-type c-decl-id-start face font-lock-type-face) 412 413 (fontified t) 413 414 (fontified t face font-lock-variable-name-face) 414 515 (fontified t) 515 519 (fontified t face font-lock-string-face) 519 551 (fontified t) 551 555 (fontified t face font-lock-string-face) 555 581 (fontified t) 581 595 (fontified t face font-lock-string-face) 595 608 (fontified t) 608 612 (c-in-sws t c-is-sws t fontified t) 612 613 (c-in-sws t c-is-sws t fontified t face font-lock-comment-delimiter-face) 613 614 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 614 639 (c-in-sws t fontified t face font-lock-comment-face) 639 642 (c-is-sws t c-in-sws t fontified t) 642 643 (c-is-sws t fontified t) 643 681 (fontified t) 681 692 (fontified t face font-lock-string-face) 692 746 (fontified t) 746 747 (fontified t ws-butler-chg delete) 747 748 (fontified t) 748 750 (fontified t face font-lock-keyword-face) 750 784 (fontified t) 784 795 (fontified t face font-lock-string-face) 795 797 (fontified t) 797 798 (fontified t)) . 6650) (undo-tree-id26 . -746) (undo-tree-id27 . -746) (undo-tree-id28 . -746)) nil (25315 37450 794538 945000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t ws-butler-chg chg)) . -6650) (undo-tree-id25 . -6) 6656 (6649 . 6656) 6604) nil (25315 37450 794534 968000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 6645)) nil (25315 37450 794532 569000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t ws-butler-chg chg)) . -6606) (undo-tree-id23 . -1) (undo-tree-id24 . -1) 6607 (6606 . 6607)) nil (25315 37450 794531 143000) 0 nil])
([nil nil ((6608 . 6609)) nil (25315 37450 794527 439000) 0 nil])
([nil nil ((6696 . 6698) (#(" " 0 1 (fontified t ws-butler-chg chg c-in-sws t face font-lock-comment-face)) . -6696) (undo-tree-id0 . -1) (#("2" 0 1 (fontified t ws-butler-chg chg face font-lock-comment-face c-in-sws t)) . -6697) (undo-tree-id1 . -1) 6698 (6694 . 6698) (6693 . 6694) (6692 . 6693) (6691 . 6692) (6690 . 6691) (6686 . 6690) (#(" " 0 1 (fontified t ws-butler-chg chg c-in-sws t face font-lock-comment-face)) . -6686) (undo-tree-id2 . -1) (#("-" 0 1 (fontified t ws-butler-chg chg face font-lock-comment-face c-in-sws t)) . -6687) (undo-tree-id3 . -1) 6688 (6686 . 6688) (6685 . 6686) (6684 . 6685) (6683 . 6684) (#("^" 0 1 (fontified t ws-butler-chg chg c-in-sws t face font-lock-comment-face)) . -6683) (undo-tree-id4 . -1) (#("-" 0 1 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -6684) (undo-tree-id5 . -1) (#(">" 0 1 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -6685) (undo-tree-id6 . -1) 6686 (6683 . 6686) (#("-" 0 1 (fontified t ws-butler-chg chg c-in-sws t face font-lock-comment-face)) . -6683) (undo-tree-id7 . -1) (#("^" 0 1 (fontified t ws-butler-chg chg c-in-sws t face font-lock-comment-face)) . -6684) (undo-tree-id8 . -1) (#("-" 0 1 (fontified t ws-butler-chg chg c-in-sws t face font-lock-comment-face)) . -6685) (undo-tree-id9 . -1) (#(">" 0 1 (fontified t ws-butler-chg chg face font-lock-comment-face c-in-sws t)) . -6686) (undo-tree-id10 . -1) 6687 (6684 . 6687) (#("-" 0 1 (fontified t ws-butler-chg chg face font-lock-comment-face c-in-sws t)) . -6684) (undo-tree-id11 . -1) 6685 (6683 . 6685) (#("f" 0 1 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -6683) (undo-tree-id12 . -1) (#("o" 0 1 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -6684) (undo-tree-id13 . -1) (#("r" 0 1 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -6685) (undo-tree-id14 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -6686) (undo-tree-id15 . -1) 6687 (6680 . 6687) (6678 . 6680) (6677 . 6678) (6676 . 6677) (6656 . 6676) (6650 . 6656) (6650 . 6651) (#("
" 0 1 (ws-butler-chg delete fontified t)) . 6650) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1)) nil (25315 37450 794518 559000) 0 nil])
([nil nil ((#("      " 0 1 (fontified t ws-butler-chg chg c-is-sws t) 1 6 (fontified t ws-butler-chg chg c-is-sws t)) . -6699) (undo-tree-id40 . -6) 6705 (6698 . 6705) (t 25315 37450 797647 889000) 6696) nil (25315 37494 490283 936000) 0 nil])
([nil nil ((#("      " 0 1 (fontified t ws-butler-chg chg c-is-sws t) 1 6 (fontified t ws-butler-chg chg c-is-sws t)) . -6699) (undo-tree-id37 . -6) (undo-tree-id38 . -6) (undo-tree-id39 . -6) 6705 (6698 . 6705) 6670) nil (25315 37494 490279 485000) 0 nil])
([nil nil ((#("= " 0 1 (fontified t) 1 2 (fontified t)) . 6673)) nil (25315 37494 490273 413000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t ws-butler-chg delete)) . 6673)) nil (25315 37494 490272 5000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t ws-butler-chg delete)) . 6673)) nil (25315 37494 490270 315000) 0 nil])
([nil nil ((nil ws-butler-chg delete 6674 . 6675) (6673 . 6674)) nil (25315 37494 490268 486000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 6672) (undo-tree-id35 . -1) (undo-tree-id36 . -1)) nil (25315 37494 490263 274000) 0 nil])
([nil nil ((#("      " 0 1 (fontified t c-is-sws t ws-butler-chg chg) 1 6 (fontified t c-is-sws t ws-butler-chg chg)) . -6695) (undo-tree-id85 . -6) 6701 (6695 . 6701) (6695 . 6696) (#("
" 0 1 (c-is-sws t fontified t)) . 6695) (undo-tree-id86 . 1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (t 25315 37494 492955 730000)) nil (25315 37581 479767 279000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete c-is-sws t)) . 6695) (undo-tree-id84 . 1)) nil (25315 37581 479758 430000) 0 nil])
([nil nil ((6733 . 6739) (#("          " 0 10 (fontified nil ws-butler-chg chg)) . 6733) (undo-tree-id78 . -10) (6743 . 6744) (6732 . 6743) (6731 . 6732) (6730 . 6731) (6729 . 6730) (6719 . 6729) (6705 . 6719) (#("s" 0 1 (fontified t ws-butler-chg chg)) . -6705) (undo-tree-id79 . -1) (#("t" 0 1 (fontified t ws-butler-chg chg)) . -6706) (undo-tree-id80 . -1) (#("a" 0 1 (fontified t ws-butler-chg chg)) . -6707) (undo-tree-id81 . -1) 6708 (6705 . 6708) (6704 . 6705) (6700 . 6704) (#(" " 0 1 (fontified t c-is-sws t ws-butler-chg chg)) . -6700) (undo-tree-id82 . -1) 6701 (6695 . 6701) (6695 . 6696) (#("
" 0 1 (fontified t ws-butler-chg delete c-is-sws t)) . 6695) (undo-tree-id83 . 1)) nil (25315 37581 479753 80000) 0 nil])
([nil nil ((#("          " 0 10 (fontified t ws-butler-chg chg)) . -6733) (undo-tree-id77 . -10) 6743 (6732 . 6743) 6701) nil (25315 37581 479733 567000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . 6733) (undo-tree-id76 . 1)) nil (25315 37581 479726 426000) 0 nil])
([nil nil ((6775 . 6785) (#("              " 0 14 (fontified nil ws-butler-chg chg)) . 6775) (undo-tree-id70 . -14) (6789 . 6790) (6774 . 6789) (6773 . 6774) (6772 . 6773) (6771 . 6772) (6751 . 6771) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -6751) (undo-tree-id71 . -1) 6752 (6751 . 6752) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -6751) (undo-tree-id72 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -6752) (undo-tree-id73 . -1) 6753 (6752 . 6753) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -6752) (undo-tree-id74 . -1) 6753 (6747 . 6753) (6746 . 6747) (6745 . 6746) (#("else" 0 1 (ws-butler-chg chg fontified nil face font-lock-keyword-face) 1 2 (ws-butler-chg chg fontified nil face font-lock-keyword-face) 2 3 (ws-butler-chg chg fontified nil face font-lock-keyword-face) 3 4 (ws-butler-chg chg fontified nil face font-lock-keyword-face)) . 6745) (undo-tree-id75 . -4) (6741 . 6745) 6745 (6740 . 6745)) nil (25315 37581 479719 447000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t ws-butler-chg chg)) . 6731) (undo-tree-id68 . 1) (undo-tree-id69 . -1)) nil (25315 37581 479705 906000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t ws-butler-chg chg)) . 6730)) nil (25315 37581 479703 348000) 0 nil])
([nil nil ((#("}" 0 1 (ws-butler-chg delete fontified t)) . 6737) (undo-tree-id66 . 1) (undo-tree-id67 . -1)) nil (25315 37581 479701 576000) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg delete fontified t)) . 6737)) nil (25315 37581 479698 906000) 0 nil])
([nil nil ((#("          }
" 0 10 (fontified t ws-butler-chg chg) 10 11 (fontified t ws-butler-chg delete) 11 12 (ws-butler-chg delete fontified t)) . 6771) (undo-tree-id64 . 1) (undo-tree-id65 . -6) 6777) nil (25315 37581 479697 366000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t ws-butler-chg chg)) . 6769) (undo-tree-id62 . 1) (undo-tree-id63 . -1)) nil (25315 37581 479694 245000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t ws-butler-chg chg)) . 6768)) nil (25315 37581 479691 246000) 0 nil])
([nil nil ((6741 . 6747) (6730 . 6741) 6729) nil (25315 37581 479689 673000) 0 nil])
([nil nil ((#("          state 
" 0 10 (fontified t ws-butler-chg chg) 10 11 (fontified t ws-butler-chg chg) 11 12 (fontified t ws-butler-chg chg) 12 13 (fontified t ws-butler-chg chg) 13 14 (fontified t ws-butler-chg chg) 14 15 (fontified t ws-butler-chg chg) 15 16 (fontified t ws-butler-chg chg) 16 17 (fontified t ws-butler-chg delete)) . 6731) (undo-tree-id60 . 1) (undo-tree-id61 . -15) 6746) nil (25315 37581 479687 423000) 0 nil])
([nil nil ((6740 . 6741) (6730 . 6740) (#("
" 0 1 (fontified t ws-butler-chg chg)) . -6730) (undo-tree-id44 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -6731) (undo-tree-id45 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -6732) (undo-tree-id46 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -6733) (undo-tree-id47 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -6734) (undo-tree-id48 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -6735) (undo-tree-id49 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -6736) (undo-tree-id50 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -6737) (undo-tree-id51 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -6738) (undo-tree-id52 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -6739) (undo-tree-id53 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -6740) (undo-tree-id54 . -1) (#("s" 0 1 (fontified t ws-butler-chg chg)) . -6741) (undo-tree-id55 . -1) (#("t" 0 1 (fontified t ws-butler-chg chg)) . -6742) (undo-tree-id56 . -1) (#("a" 0 1 (fontified t ws-butler-chg chg)) . -6743) (undo-tree-id57 . -1) (#("t" 0 1 (fontified t ws-butler-chg chg)) . -6744) (undo-tree-id58 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -6745) (undo-tree-id59 . -1) 6746 (6741 . 6746) (6730 . 6741) 6701) nil (25315 37581 479680 23000) 0 nil])
([nil nil ((6789 . 6790) (6782 . 6789) (#("e" 0 1 (ws-butler-chg chg fontified t)) . -6782) (undo-tree-id41 . -1) 6783 (#("a" 0 1 (ws-butler-chg chg fontified t)) . -6783) (undo-tree-id42 . -1) (#("t" 0 1 (ws-butler-chg chg fontified t)) . -6784) (undo-tree-id43 . -1) 6785 (6779 . 6785)) nil (25315 37581 479642 195000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t ws-butler-chg chg)) . -6792) (undo-tree-id128 . -6) (undo-tree-id129 . -6) (undo-tree-id130 . -6) 6798 (6791 . 6798) (#("      " 0 6 (fontified t ws-butler-chg chg)) . 6791) (undo-tree-id131 . -6) (undo-tree-id132 . -6) 6797 (6790 . 6797) (t 25315 37581 483460 227000) 6789) nil (25315 37652 997619 608000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . 6792) (undo-tree-id127 . 1)) nil (25315 37652 997612 518000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg chg)) . 6791) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1)) nil (25315 37652 997610 390000) 0 nil])
([nil nil ((#("      if (state == 0 && tmp == '^') state = 1;
" 0 1 (fontified t c-is-sws t) 1 5 (fontified t c-is-sws t) 5 6 (fontified t c-is-sws t) 6 7 (fontified t c-is-sws t face font-lock-keyword-face) 7 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 21 (fontified t) 21 22 (fontified t) 22 23 (fontified t) 23 24 (fontified t) 24 25 (fontified t) 25 26 (fontified t) 26 27 (fontified t) 27 28 (fontified t) 28 29 (fontified t) 29 30 (fontified t) 30 31 (fontified t) 31 32 (fontified t face font-lock-string-face) 32 33 (fontified t face font-lock-string-face) 33 34 (fontified t face font-lock-string-face) 34 35 (fontified t) 35 36 (fontified t) 36 37 (fontified t) 37 38 (fontified t) 38 39 (fontified t) 39 40 (fontified t) 40 41 (fontified t) 41 42 (fontified t) 42 43 (fontified t) 43 44 (fontified t) 44 45 (fontified t) 45 46 (fontified t) 46 47 (fontified t)) . 6695)) nil (25315 37652 997606 121000) 0 nil])
([nil nil ((#("      else (state == 1 && tmp == '$') state = 0;
" 0 1 (fontified t c-is-sws t ws-butler-chg delete) 1 6 (fontified t c-is-sws t) 6 7 (fontified t c-is-sws t face font-lock-keyword-face) 7 10 (fontified t face font-lock-keyword-face) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 21 (fontified t) 21 22 (fontified t) 22 23 (fontified t) 23 24 (fontified t) 24 25 (fontified t) 25 26 (fontified t) 26 27 (fontified t) 27 28 (fontified t) 28 29 (fontified t) 29 30 (fontified t) 30 31 (fontified t) 31 32 (fontified t) 32 33 (fontified t) 33 34 (fontified t face font-lock-string-face) 34 35 (fontified t face font-lock-string-face) 35 36 (fontified t face font-lock-string-face) 36 37 (fontified t) 37 38 (fontified t) 38 39 (fontified t) 39 40 (fontified t) 40 41 (fontified t) 41 42 (fontified t) 42 43 (fontified t) 43 44 (fontified t) 44 45 (fontified t) 45 46 (fontified t) 46 47 (fontified t) 47 48 (fontified t) 48 49 (fontified t ws-butler-chg chg)) . 6695) (undo-tree-id116 . -47) (undo-tree-id117 . -49) (undo-tree-id118 . -49) (undo-tree-id119 . -49) (undo-tree-id120 . -49) (undo-tree-id121 . -49) (undo-tree-id122 . -48)) nil (25315 37652 997604 405000) 0 nil])
([nil nil ((6775 . 6776) (6774 . 6775) (6768 . 6774) (#("+" 0 1 (ws-butler-chg chg fontified t)) . -6768) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (#("=" 0 1 (ws-butler-chg chg fontified t)) . -6769) (undo-tree-id104 . -1) (undo-tree-id105 . -1) 6770 (6750 . 6770) (6749 . 6750) (6745 . 6749) (6744 . 6745) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -6744) (undo-tree-id106 . -1) 6745 (6742 . 6745) (6734 . 6742) (#("s" 0 1 (ws-butler-chg chg fontified t)) . -6734) (undo-tree-id107 . -1) (#("t" 0 1 (ws-butler-chg chg fontified t)) . -6735) (undo-tree-id108 . -1) (#("a" 0 1 (ws-butler-chg chg fontified t)) . -6736) (undo-tree-id109 . -1) (#("t" 0 1 (ws-butler-chg chg fontified t)) . -6737) (undo-tree-id110 . -1) (#("e" 0 1 (ws-butler-chg chg fontified t)) . -6738) (undo-tree-id111 . -1) 6739 (6727 . 6739) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -6727) (undo-tree-id112 . -1) 6728 (6720 . 6728) (#("u" 0 1 (ws-butler-chg chg fontified t)) . -6720) (undo-tree-id113 . -1) 6721 (6720 . 6721) (6719 . 6720) (#("0" 0 1 (ws-butler-chg chg fontified t)) . -6719) (undo-tree-id114 . -1) (#(";" 0 1 (ws-butler-chg chg fontified t)) . -6720) (undo-tree-id115 . -1) 6721 (6720 . 6721) (6705 . 6720) (6701 . 6705) (6694 . 6701) 6650) nil (25315 37652 997593 37000) 0 nil])
([nil nil ((6802 . 6808) (#("          " 0 10 (fontified nil ws-butler-chg chg)) . 6802) (undo-tree-id98 . -10) (undo-tree-id99 . -10) (6812 . 6813) (6801 . 6812) (6800 . 6801) (6799 . 6800) (6798 . 6799) (6787 . 6798) (#("will" 0 1 (fontified t ws-butler-chg chg) 1 2 (fontified t ws-butler-chg chg) 2 3 (fontified t ws-butler-chg chg) 3 4 (fontified t ws-butler-chg chg)) . -6787) (undo-tree-id100 . -4) (undo-tree-id101 . -4) 6791 (6787 . 6791) (6786 . 6787) (6783 . 6786) (6776 . 6783) 6775) nil (25315 37652 997561 848000) 0 nil])
([nil nil ((6844 . 6845) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -6844) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (#("0" 0 1 (fontified t ws-butler-chg chg)) . -6845) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) 6846 (6838 . 6846) (6827 . 6838) (6826 . 6827) (6812 . 6826) (6801 . 6812) 6783) nil (25315 37652 997547 991000) 0 nil])
([nil nil ((6870 . 6871) (6867 . 6870) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -6867) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (#("a" 0 1 (fontified t ws-butler-chg chg)) . -6868) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (#("t" 0 1 (fontified t ws-butler-chg chg)) . -6869) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -6870) (undo-tree-id144 . -1) (undo-tree-id145 . -1) 6871 (6865 . 6871) (6864 . 6865) (6861 . 6864) (6854 . 6861) (#("      " 0 6 (fontified t ws-butler-chg chg)) . 6854) (undo-tree-id146 . -6) 6860 (6853 . 6860) (t 25315 37653 1432 487000) 6852) nil (25315 37702 380941 980000) 0 nil])
([nil nil ((6862 . 6863) (6853 . 6862) (#("P" 0 1 (fontified t ws-butler-chg chg)) . -6853) (undo-tree-id133 . -1) 6854 (6853 . 6854) (6838 . 6853) (#("usart1_" 0 7 (fontified t ws-butler-chg chg)) . -6838) (undo-tree-id134 . -7) 6845 (6838 . 6845) (#("usart" 0 1 (fontified t ws-butler-chg chg) 1 2 (fontified t ws-butler-chg chg) 2 3 (fontified t ws-butler-chg chg) 3 4 (fontified t ws-butler-chg chg) 4 5 (fontified t ws-butler-chg chg)) . -6838) (undo-tree-id135 . -5) 6843 (6838 . 6843) (#("R" 0 1 (fontified t ws-butler-chg chg)) . -6838) (undo-tree-id136 . -1) (#("x" 0 1 (fontified t ws-butler-chg chg)) . -6839) (undo-tree-id137 . -1) 6840 (6838 . 6840) (6827 . 6838) 6817) nil (25315 37702 380923 42000) 0 nil])
([nil nil ((1045 . 1046) (1038 . 1045) (#("x" 0 1 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . -1038) (undo-tree-id151 . -1) 1039 (1034 . 1039) (1013 . 1034) (1012 . 1013) (t 25315 37702 384754 466000) 1011) nil (25315 37750 531321 478000) 0 nil])
([nil nil ((6944 . 6950) (#("          " 0 10 (fontified nil ws-butler-chg chg)) . 6944) (undo-tree-id149 . -10) (undo-tree-id150 . -10) (6954 . 6955) (6943 . 6954) (6942 . 6943) (6941 . 6942)) nil (25315 37750 531316 600000) 0 nil])
([nil nil ((6999 . 7000) (6990 . 6999) (6970 . 6990) (#("usart" 0 1 (fontified t ws-butler-chg chg) 1 2 (fontified t ws-butler-chg chg) 2 3 (fontified t ws-butler-chg chg) 3 4 (fontified t ws-butler-chg chg) 4 5 (fontified t ws-butler-chg chg)) . -6970) (undo-tree-id147 . -5) 6975 (6969 . 6975) (6954 . 6969) (#("usart1" 0 1 (fontified t ws-butler-chg chg) 1 2 (fontified t ws-butler-chg chg) 2 3 (fontified t ws-butler-chg chg) 3 4 (fontified t ws-butler-chg chg) 4 5 (fontified t ws-butler-chg chg) 5 6 (fontified t ws-butler-chg chg)) . -6954) (undo-tree-id148 . -6) 6960 (6954 . 6960) (6943 . 6954) 6931) nil (25315 37750 531308 92000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t)) . 6942) (undo-tree-id191 . 1) (undo-tree-id192 . -1) (t 25315 37750 535015 353000)) nil (25315 37903 711552 151000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 6941)) nil (25315 37903 711548 916000) 0 nil])
([nil nil ((#("      }
" 0 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t)) . 6999) (undo-tree-id183 . -8) (undo-tree-id184 . -8) (undo-tree-id185 . -8) (undo-tree-id186 . -8) (undo-tree-id187 . -8) (undo-tree-id188 . -6) (undo-tree-id189 . 2) (undo-tree-id190 . -7) 7005) nil (25315 37903 711547 439000) 0 nil])
([nil nil ((6864 . 6874) (#("              " 0 14 (fontified nil ws-butler-chg chg)) . 6864) (undo-tree-id182 . -14) (6878 . 6879) (6863 . 6878) (6862 . 6863) (6861 . 6862) (6860 . 6861) (6850 . 6860) (6849 . 6850) (6846 . 6849) (6835 . 6846) 6813) nil (25315 37903 711537 565000) 0 nil])
([nil nil ((#("          " 0 10 (fontified t ws-butler-chg chg)) . -6876) (undo-tree-id181 . -10) 6886 (6875 . 6886) 6874) nil (25315 37903 711532 304000) 0 nil])
([nil nil ((6969 . 6970) (6966 . 6969) (6951 . 6966) (#("usart1_" 0 7 (fontified t ws-butler-chg chg)) . -6951) (undo-tree-id156 . -7) 6958 (6951 . 6958) (#("usart" 0 1 (fontified t ws-butler-chg chg) 1 2 (fontified t ws-butler-chg chg) 2 3 (fontified t ws-butler-chg chg) 3 4 (fontified t ws-butler-chg chg) 4 5 (fontified t ws-butler-chg chg)) . -6951) (undo-tree-id157 . -5) 6956 (6951 . 6956) (6947 . 6951) (6946 . 6947) (#("p" 0 1 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . -6946) (undo-tree-id158 . -1) 6947 (6942 . 6947) (#("*" 0 1 (fontified t ws-butler-chg chg)) . -6942) (undo-tree-id159 . -1) 6943 (6942 . 6943) (6938 . 6942) (#("r" 0 1 (fontified t ws-butler-chg chg)) . -6938) (undo-tree-id160 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -6939) (undo-tree-id161 . -1) (#("c" 0 1 (fontified t ws-butler-chg chg)) . -6940) (undo-tree-id162 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -6941) (undo-tree-id163 . -1) (#("i" 0 1 (fontified t ws-butler-chg chg)) . -6942) (undo-tree-id164 . -1) (#("v" 0 1 (fontified t ws-butler-chg chg)) . -6943) (undo-tree-id165 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -6944) (undo-tree-id166 . -1) (#("_" 0 1 (fontified t ws-butler-chg chg)) . -6945) (undo-tree-id167 . -1) (#("x" 0 1 (fontified t ws-butler-chg chg)) . -6946) (undo-tree-id168 . -1) 6947 (6946 . 6947) (6938 . 6946) (#("receive" 0 1 (fontified t ws-butler-chg chg) 1 2 (fontified t ws-butler-chg chg) 2 3 (fontified t ws-butler-chg chg) 3 4 (fontified t ws-butler-chg chg) 4 5 (fontified t ws-butler-chg chg) 5 6 (fontified t ws-butler-chg chg) 6 7 (fontified t ws-butler-chg chg)) . -6938) (undo-tree-id169 . -7) 6945 (6940 . 6945) (6938 . 6940) (#("s" 0 1 (fontified t ws-butler-chg chg)) . -6938) (undo-tree-id170 . -1) (#("s" 0 1 (fontified t ws-butler-chg chg)) . -6939) (undo-tree-id171 . -1) (#("c" 0 1 (fontified t ws-butler-chg chg)) . -6940) (undo-tree-id172 . -1) (#("a" 0 1 (fontified t ws-butler-chg chg)) . -6941) (undo-tree-id173 . -1) (#("n" 0 1 (fontified t ws-butler-chg chg)) . -6942) (undo-tree-id174 . -1) (#("f" 0 1 (fontified t ws-butler-chg chg)) . -6943) (undo-tree-id175 . -1) (#("(" 0 1 (fontified t ws-butler-chg chg)) . -6944) (undo-tree-id176 . -1) (#("\"" 0 1 (fontified t ws-butler-chg chg face font-lock-warning-face)) . -6945) (undo-tree-id177 . -1) (nil syntax-table nil 6946 . 6947) (nil syntax-table (1) 6945 . 6946) (#("%" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -6946) (undo-tree-id178 . -1) (nil syntax-table nil 6947 . 6948) (nil syntax-table (1) 6945 . 6946) (6946 . 6947) (nil syntax-table nil 6946 . 6947) (nil syntax-table (1) 6945 . 6946) (6945 . 6946) (6944 . 6945) (6938 . 6944) (6923 . 6938) (6922 . 6923) (6914 . 6922) (6894 . 6914) (#("usart1_" 0 1 (fontified t ws-butler-chg chg) 1 2 (fontified t ws-butler-chg chg) 2 3 (fontified t ws-butler-chg chg) 3 4 (fontified t ws-butler-chg chg) 4 5 (fontified t ws-butler-chg chg) 5 6 (fontified t ws-butler-chg chg) 6 7 (fontified t ws-butler-chg chg)) . -6894) (undo-tree-id179 . -7) 6901 (6893 . 6901) (6878 . 6893) (#("usart1" 0 1 (fontified t ws-butler-chg chg) 1 2 (fontified t ws-butler-chg chg) 2 3 (fontified t ws-butler-chg chg) 3 4 (fontified t ws-butler-chg chg) 4 5 (fontified t ws-butler-chg chg) 5 6 (fontified t ws-butler-chg chg)) . -6878) (undo-tree-id180 . -6) 6884 (6878 . 6884) (6863 . 6878) 6836) nil (25315 37903 711521 959000) 0 nil])
([nil nil ((6951 . 6952)) nil (25315 37903 711431 854000) 0 nil])
([nil nil ((#("              " 0 14 (fontified t ws-butler-chg chg)) . -6924) (undo-tree-id155 . -14) 6938 (6923 . 6938) 6891) nil (25315 37903 711430 147000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . 6924) (undo-tree-id154 . 1)) nil (25315 37903 711426 346000) 0 nil])
([nil nil ((6971 . 6972) (6968 . 6971) (6953 . 6968) (#("usart1_" 0 1 (fontified t ws-butler-chg chg) 1 2 (fontified t ws-butler-chg chg) 2 3 (fontified t ws-butler-chg chg) 3 4 (fontified t ws-butler-chg chg) 4 5 (fontified t ws-butler-chg chg) 5 6 (fontified t ws-butler-chg chg) 6 7 (fontified t ws-butler-chg chg)) . -6953) (undo-tree-id152 . -7) 6960 (6959 . 6960) (#("[" 0 1 (fontified t ws-butler-chg chg)) . -6959) (undo-tree-id153 . -1) 6960 (6959 . 6960) (6938 . 6959) (6923 . 6938) 6864) nil (25315 37903 711420 293000) 0 nil])
([nil nil ((7136 . 7137) (7130 . 7136) (7121 . 7130) (#("recei" 0 1 (fontified t ws-butler-chg chg) 1 2 (fontified t ws-butler-chg chg) 2 3 (fontified t ws-butler-chg chg) 3 4 (fontified t ws-butler-chg chg) 4 5 (fontified t ws-butler-chg chg)) . -7121) (undo-tree-id193 . -5) (undo-tree-id194 . -5) 7126 (7121 . 7126) (7120 . 7121) (#(" x" 0 2 (fontified nil ws-butler-chg chg)) . -7120) (7120 . 7122) (#("else" 0 1 (fontified nil ws-butler-chg chg face font-lock-keyword-face) 1 2 (fontified nil ws-butler-chg chg face font-lock-keyword-face) 2 3 (fontified nil ws-butler-chg chg face font-lock-keyword-face) 3 4 (fontified nil ws-butler-chg chg face font-lock-keyword-face)) . 7120) (undo-tree-id195 . -4) (7116 . 7120) 7120 (7116 . 7120) (7101 . 7116) (7100 . 7101) (7094 . 7100) (#("[" 0 1 (fontified t ws-butler-chg chg)) . -7094) (undo-tree-id196 . -1) 7095 (7094 . 7095) (#("[" 0 1 (fontified t ws-butler-chg chg)) . -7094) (undo-tree-id197 . -1) 7095 (7094 . 7095) (7085 . 7094) (#("rece" 0 1 (ws-butler-chg chg fontified t) 1 2 (ws-butler-chg chg fontified t) 2 3 (ws-butler-chg chg fontified t) 3 4 (ws-butler-chg chg fontified t)) . -7085) (undo-tree-id198 . -4) 7089 (7084 . 7089) (7083 . 7084) (7072 . 7083) (7071 . 7072) (7068 . 7071) (7053 . 7068) (7052 . 7053) (7051 . 7052) (7050 . 7051) (7049 . 7050) (#("a" 0 1 (ws-butler-chg chg fontified t)) . -7049) (undo-tree-id199 . -1) 7050 (7045 . 7050) (7039 . 7045) (#("r" 0 1 (ws-butler-chg chg fontified t)) . -7039) (undo-tree-id200 . -1) (#("e" 0 1 (ws-butler-chg chg fontified t)) . -7040) (undo-tree-id201 . -1) (#("s" 0 1 (ws-butler-chg chg fontified t)) . -7041) (undo-tree-id202 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -7042) (undo-tree-id203 . -1) (#("=" 0 1 (ws-butler-chg chg fontified t)) . -7043) (undo-tree-id204 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -7044) (undo-tree-id205 . -1) 7045 (7035 . 7045) (7020 . 7035) (t 25315 37903 715869 593000) 7019) nil (25315 37962 137031 573000) 0 nil])
([nil current ((7137 . 7138) (#(";" 0 1 (fontified t ws-butler-chg chg)) . -7137) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) 7138 (7137 . 7138) (7136 . 7137) (7133 . 7136) (#("[" 0 1 (fontified t ws-butler-chg chg)) . -7133) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (#("y" 0 1 (fontified t ws-butler-chg chg)) . -7134) (undo-tree-id211 . -1) (undo-tree-id212 . -1) 7135 (7125 . 7135) (7124 . 7125) (7121 . 7124) (t 25315 37962 141286 485000)) nil (25315 37972 966819 633000) 0 nil])
nil
