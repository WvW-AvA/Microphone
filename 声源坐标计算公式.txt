	    
	    @(x4,y4)
	     |
	     |
(x1,y1) @----------@(x2,y2)										O(xs,ys)											
	     |
	     |
	    @(x3,y3)


xn,yn:第n个麦克风的坐标

d1:测量距离差1
d2：测量距离差2

xs =
 
(d2*((- d2^2 + x3^2 - 2*x3*x4 + x4^2 + y3^2 - 2*y3*y4 + y4^2)*(- d2^2 + x3^2 - 2*x3*x4 + x4^2 + 4*y^2 - 4*y*y3 - 4*y*y4 + y3^2 + 2*y3*y4 + y4^2))^(1/2) + d2^2*x3 + d2^2*x4 + x3*x4^2 + x3^2*x4 - x3*y3^2 + x3*y4^2 + x4*y3^2 - x4*y4^2 - x3^3 - x4^3 + 2*x3*y*y3 - 2*x3*y*y4 - 2*x4*y*y3 + 2*x4*y*y4)/(2*d2^2 - 2*x3^2 + 4*x3*x4 - 2*x4^2)
 
(d2^2*x3 - d2*((- d2^2 + x3^2 - 2*x3*x4 + x4^2 + y3^2 - 2*y3*y4 + y4^2)*(- d2^2 + x3^2 - 2*x3*x4 + x4^2 + 4*y^2 - 4*y*y3 - 4*y*y4 + y3^2 + 2*y3*y4 + y4^2))^(1/2) + d2^2*x4 + x3*x4^2 + x3^2*x4 - x3*y3^2 + x3*y4^2 + x4*y3^2 - x4*y4^2 - x3^3 - x4^3 + 2*x3*y*y3 - 2*x3*y*y4 - 2*x4*y*y3 + 2*x4*y*y4)/(2*d2^2 - 2*x3^2 + 4*x3*x4 - 2*x4^2)
 
(d2*((- d2^2 + x3^2 - 2*x3*x4 + x4^2 + y3^2 - 2*y3*y4 + y4^2)*(- d2^2 + x3^2 - 2*x3*x4 + x4^2 + 4*y^2 - 4*y*y3 - 4*y*y4 + y3^2 + 2*y3*y4 + y4^2))^(1/2) + d2^2*x3 + d2^2*x4 + x3*x4^2 + x3^2*x4 - x3*y3^2 + x3*y4^2 + x4*y3^2 - x4*y4^2 - x3^3 - x4^3 + 2*x3*y*y3 - 2*x3*y*y4 - 2*x4*y*y3 + 2*x4*y*y4)/(2*d2^2 - 2*x3^2 + 4*x3*x4 - 2*x4^2)
 
(d2^2*x3 - d2*((- d2^2 + x3^2 - 2*x3*x4 + x4^2 + y3^2 - 2*y3*y4 + y4^2)*(- d2^2 + x3^2 - 2*x3*x4 + x4^2 + 4*y^2 - 4*y*y3 - 4*y*y4 + y3^2 + 2*y3*y4 + y4^2))^(1/2) + d2^2*x4 + x3*x4^2 + x3^2*x4 - x3*y3^2 + x3*y4^2 + x4*y3^2 - x4*y4^2 - x3^3 - x4^3 + 2*x3*y*y3 - 2*x3*y*y4 - 2*x4*y*y3 + 2*x4*y*y4)/(2*d2^2 - 2*x3^2 + 4*x3*x4 - 2*x4^2)
 
 
ys =
 
 (d2*((- d2^2 + x3^2 - 2*x3*x4 + x4^2 + y3^2 - 2*y3*y4 + y4^2)*(- d2^2 + x3^2 - 2*x3*x4 + x4^2 + 4*y^2 - 4*y*y3 - 4*y*y4 + y3^2 + 2*y3*y4 + y4^2))^(1/2) + d2^2*x3 + d2^2*x4 + x3*x4^2 + x3^2*x4 - x3*y3^2 + x3*y4^2 + x4*y3^2 - x4*y4^2 - x3^3 - x4^3 + 2*x3*y*y3 - 2*x3*y*y4 - 2*x4*y*y3 + 2*x4*y*y4)/(2*d2^2 - 2*x3^2 + 4*x3*x4 - 2*x4^2) - ((d2*((- d2^2 + x3^2 - 2*x3*x4 + x4^2 + y3^2 - 2*y3*y4 + y4^2)*(- d2^2 + x3^2 - 2*x3*x4 + x4^2 + 4*y^2 - 4*y*y3 - 4*y*y4 + y3^2 + 2*y3*y4 + y4^2))^(1/2) + d2^2*x3 + d2^2*x4 + x3*x4^2 + x3^2*x4 - x3*y3^2 + x3*y4^2 + x4*y3^2 - x4*y4^2 - x3^3 - x4^3 + 2*x3*y*y3 - 2*x3*y*y4 - 2*x4*y*y3 + 2*x4*y*y4)^2/(2*d2^2 - 2*x3^2 + 4*x3*x4 - 2*x4^2)^2 + 2*y*y1 - 2*y*y2 + 2*d1*((d2*((- d2^2 + x3^2 - 2*x3*x4 + x4^2 + y3^2 - 2*y3*y4 + y4^2)*(- d2^2 + x3^2 - 2*x3*x4 + x4^2 + 4*y^2 - 4*y*y3 - 4*y*y4 + y3^2 + 2*y3*y4 + y4^2))^(1/2) + d2^2*x3 + d2^2*x4 + x3*x4^2 + x3^2*x4 - x3*y3^2 + x3*y4^2 + x4*y3^2 - x4*y4^2 - x3^3 - x4^3 + 2*x3*y*y3 - 2*x3*y*y4 - 2*x4*y*y3 + 2*x4*y*y4)^2/(2*d2^2 - 2*x3^2 + 4*x3*x4 - 2*x4^2)^2 - 2*y*y2 + x2^2 + y^2 + y2^2 - (2*x2*(d2*((- d2^2 + x3^2 - 2*x3*x4 + x4^2 + y3^2 - 2*y3*y4 + y4^2)*(- d2^2 + x3^2 - 2*x3*x4 + x4^2 + 4*y^2 - 4*y*y3 - 4*y*y4 + y3^2 + 2*y3*y4 + y4^2))^(1/2) + d2^2*x3 + d2^2*x4 + x3*x4^2 + x3^2*x4 - x3*y3^2 + x3*y4^2 + x4*y3^2 - x4*y4^2 - x3^3 - x4^3 + 2*x3*y*y3 - 2*x3*y*y4 - 2*x4*y*y3 + 2*x4*y*y4))/(2*d2^2 - 2*x3^2 + 4*x3*x4 - 2*x4^2))^(1/2) + d1^2 + x2^2 - y1^2 + y2^2 - (2*x2*(d2*((- d2^2 + x3^2 - 2*x3*x4 + x4^2 + y3^2 - 2*y3*y4 + y4^2)*(- d2^2 + x3^2 - 2*x3*x4 + x4^2 + 4*y^2 - 4*y*y3 - 4*y*y4 + y3^2 + 2*y3*y4 + y4^2))^(1/2) + d2^2*x3 + d2^2*x4 + x3*x4^2 + x3^2*x4 - x3*y3^2 + x3*y4^2 + x4*y3^2 - x4*y4^2 - x3^3 - x4^3 + 2*x3*y*y3 - 2*x3*y*y4 - 2*x4*y*y3 + 2*x4*y*y4))/(2*d2^2 - 2*x3^2 + 4*x3*x4 - 2*x4^2))^(1/2)
 
(d2^2*x3 - d2*((- d2^2 + x3^2 - 2*x3*x4 + x4^2 + y3^2 - 2*y3*y4 + y4^2)*(- d2^2 + x3^2 - 2*x3*x4 + x4^2 + 4*y^2 - 4*y*y3 - 4*y*y4 + y3^2 + 2*y3*y4 + y4^2))^(1/2) + d2^2*x4 + x3*x4^2 + x3^2*x4 - x3*y3^2 + x3*y4^2 + x4*y3^2 - x4*y4^2 - x3^3 - x4^3 + 2*x3*y*y3 - 2*x3*y*y4 - 2*x4*y*y3 + 2*x4*y*y4)/(2*d2^2 - 2*x3^2 + 4*x3*x4 - 2*x4^2) - ((d2^2*x3 - d2*((- d2^2 + x3^2 - 2*x3*x4 + x4^2 + y3^2 - 2*y3*y4 + y4^2)*(- d2^2 + x3^2 - 2*x3*x4 + x4^2 + 4*y^2 - 4*y*y3 - 4*y*y4 + y3^2 + 2*y3*y4 + y4^2))^(1/2) + d2^2*x4 + x3*x4^2 + x3^2*x4 - x3*y3^2 + x3*y4^2 + x4*y3^2 - x4*y4^2 - x3^3 - x4^3 + 2*x3*y*y3 - 2*x3*y*y4 - 2*x4*y*y3 + 2*x4*y*y4)^2/(2*d2^2 - 2*x3^2 + 4*x3*x4 - 2*x4^2)^2 + 2*y*y1 - 2*y*y2 + 2*d1*((d2^2*x3 - d2*((- d2^2 + x3^2 - 2*x3*x4 + x4^2 + y3^2 - 2*y3*y4 + y4^2)*(- d2^2 + x3^2 - 2*x3*x4 + x4^2 + 4*y^2 - 4*y*y3 - 4*y*y4 + y3^2 + 2*y3*y4 + y4^2))^(1/2) + d2^2*x4 + x3*x4^2 + x3^2*x4 - x3*y3^2 + x3*y4^2 + x4*y3^2 - x4*y4^2 - x3^3 - x4^3 + 2*x3*y*y3 - 2*x3*y*y4 - 2*x4*y*y3 + 2*x4*y*y4)^2/(2*d2^2 - 2*x3^2 + 4*x3*x4 - 2*x4^2)^2 - 2*y*y2 + x2^2 + y^2 + y2^2 - (2*x2*(d2^2*x3 - d2*((- d2^2 + x3^2 - 2*x3*x4 + x4^2 + y3^2 - 2*y3*y4 + y4^2)*(- d2^2 + x3^2 - 2*x3*x4 + x4^2 + 4*y^2 - 4*y*y3 - 4*y*y4 + y3^2 + 2*y3*y4 + y4^2))^(1/2) + d2^2*x4 + x3*x4^2 + x3^2*x4 - x3*y3^2 + x3*y4^2 + x4*y3^2 - x4*y4^2 - x3^3 - x4^3 + 2*x3*y*y3 - 2*x3*y*y4 - 2*x4*y*y3 + 2*x4*y*y4))/(2*d2^2 - 2*x3^2 + 4*x3*x4 - 2*x4^2))^(1/2) + d1^2 + x2^2 - y1^2 + y2^2 - (2*x2*(d2^2*x3 - d2*((- d2^2 + x3^2 - 2*x3*x4 + x4^2 + y3^2 - 2*y3*y4 + y4^2)*(- d2^2 + x3^2 - 2*x3*x4 + x4^2 + 4*y^2 - 4*y*y3 - 4*y*y4 + y3^2 + 2*y3*y4 + y4^2))^(1/2) + d2^2*x4 + x3*x4^2 + x3^2*x4 - x3*y3^2 + x3*y4^2 + x4*y3^2 - x4*y4^2 - x3^3 - x4^3 + 2*x3*y*y3 - 2*x3*y*y4 - 2*x4*y*y3 + 2*x4*y*y4))/(2*d2^2 - 2*x3^2 + 4*x3*x4 - 2*x4^2))^(1/2)
 
(d2*((- d2^2 + x3^2 - 2*x3*x4 + x4^2 + y3^2 - 2*y3*y4 + y4^2)*(- d2^2 + x3^2 - 2*x3*x4 + x4^2 + 4*y^2 - 4*y*y3 - 4*y*y4 + y3^2 + 2*y3*y4 + y4^2))^(1/2) + d2^2*x3 + d2^2*x4 + x3*x4^2 + x3^2*x4 - x3*y3^2 + x3*y4^2 + x4*y3^2 - x4*y4^2 - x3^3 - x4^3 + 2*x3*y*y3 - 2*x3*y*y4 - 2*x4*y*y3 + 2*x4*y*y4)/(2*d2^2 - 2*x3^2 + 4*x3*x4 - 2*x4^2) + ((d2*((- d2^2 + x3^2 - 2*x3*x4 + x4^2 + y3^2 - 2*y3*y4 + y4^2)*(- d2^2 + x3^2 - 2*x3*x4 + x4^2 + 4*y^2 - 4*y*y3 - 4*y*y4 + y3^2 + 2*y3*y4 + y4^2))^(1/2) + d2^2*x3 + d2^2*x4 + x3*x4^2 + x3^2*x4 - x3*y3^2 + x3*y4^2 + x4*y3^2 - x4*y4^2 - x3^3 - x4^3 + 2*x3*y*y3 - 2*x3*y*y4 - 2*x4*y*y3 + 2*x4*y*y4)^2/(2*d2^2 - 2*x3^2 + 4*x3*x4 - 2*x4^2)^2 + 2*y*y1 - 2*y*y2 + 2*d1*((d2*((- d2^2 + x3^2 - 2*x3*x4 + x4^2 + y3^2 - 2*y3*y4 + y4^2)*(- d2^2 + x3^2 - 2*x3*x4 + x4^2 + 4*y^2 - 4*y*y3 - 4*y*y4 + y3^2 + 2*y3*y4 + y4^2))^(1/2) + d2^2*x3 + d2^2*x4 + x3*x4^2 + x3^2*x4 - x3*y3^2 + x3*y4^2 + x4*y3^2 - x4*y4^2 - x3^3 - x4^3 + 2*x3*y*y3 - 2*x3*y*y4 - 2*x4*y*y3 + 2*x4*y*y4)^2/(2*d2^2 - 2*x3^2 + 4*x3*x4 - 2*x4^2)^2 - 2*y*y2 + x2^2 + y^2 + y2^2 - (2*x2*(d2*((- d2^2 + x3^2 - 2*x3*x4 + x4^2 + y3^2 - 2*y3*y4 + y4^2)*(- d2^2 + x3^2 - 2*x3*x4 + x4^2 + 4*y^2 - 4*y*y3 - 4*y*y4 + y3^2 + 2*y3*y4 + y4^2))^(1/2) + d2^2*x3 + d2^2*x4 + x3*x4^2 + x3^2*x4 - x3*y3^2 + x3*y4^2 + x4*y3^2 - x4*y4^2 - x3^3 - x4^3 + 2*x3*y*y3 - 2*x3*y*y4 - 2*x4*y*y3 + 2*x4*y*y4))/(2*d2^2 - 2*x3^2 + 4*x3*x4 - 2*x4^2))^(1/2) + d1^2 + x2^2 - y1^2 + y2^2 - (2*x2*(d2*((- d2^2 + x3^2 - 2*x3*x4 + x4^2 + y3^2 - 2*y3*y4 + y4^2)*(- d2^2 + x3^2 - 2*x3*x4 + x4^2 + 4*y^2 - 4*y*y3 - 4*y*y4 + y3^2 + 2*y3*y4 + y4^2))^(1/2) + d2^2*x3 + d2^2*x4 + x3*x4^2 + x3^2*x4 - x3*y3^2 + x3*y4^2 + x4*y3^2 - x4*y4^2 - x3^3 - x4^3 + 2*x3*y*y3 - 2*x3*y*y4 - 2*x4*y*y3 + 2*x4*y*y4))/(2*d2^2 - 2*x3^2 + 4*x3*x4 - 2*x4^2))^(1/2)

 (d2^2*x3 - d2*((- d2^2 + x3^2 - 2*x3*x4 + x4^2 + y3^2 - 2*y3*y4 + y4^2)*(- d2^2 + x3^2 - 2*x3*x4 + x4^2 + 4*y^2 - 4*y*y3 - 4*y*y4 + y3^2 + 2*y3*y4 + y4^2))^(1/2) + d2^2*x4 + x3*x4^2 + x3^2*x4 - x3*y3^2 + x3*y4^2 + x4*y3^2 - x4*y4^2 - x3^3 - x4^3 + 2*x3*y*y3 - 2*x3*y*y4 - 2*x4*y*y3 + 2*x4*y*y4)/(2*d2^2 - 2*x3^2 + 4*x3*x4 - 2*x4^2) + ((d2^2*x3 - d2*((- d2^2 + x3^2 - 2*x3*x4 + x4^2 + y3^2 - 2*y3*y4 + y4^2)*(- d2^2 + x3^2 - 2*x3*x4 + x4^2 + 4*y^2 - 4*y*y3 - 4*y*y4 + y3^2 + 2*y3*y4 + y4^2))^(1/2) + d2^2*x4 + x3*x4^2 + x3^2*x4 - x3*y3^2 + x3*y4^2 + x4*y3^2 - x4*y4^2 - x3^3 - x4^3 + 2*x3*y*y3 - 2*x3*y*y4 - 2*x4*y*y3 + 2*x4*y*y4)^2/(2*d2^2 - 2*x3^2 + 4*x3*x4 - 2*x4^2)^2 + 2*y*y1 - 2*y*y2 + 2*d1*((d2^2*x3 - d2*((- d2^2 + x3^2 - 2*x3*x4 + x4^2 + y3^2 - 2*y3*y4 + y4^2)*(- d2^2 + x3^2 - 2*x3*x4 + x4^2 + 4*y^2 - 4*y*y3 - 4*y*y4 + y3^2 + 2*y3*y4 + y4^2))^(1/2) + d2^2*x4 + x3*x4^2 + x3^2*x4 - x3*y3^2 + x3*y4^2 + x4*y3^2 - x4*y4^2 - x3^3 - x4^3 + 2*x3*y*y3 - 2*x3*y*y4 - 2*x4*y*y3 + 2*x4*y*y4)^2/(2*d2^2 - 2*x3^2 + 4*x3*x4 - 2*x4^2)^2 - 2*y*y2 + x2^2 + y^2 + y2^2 - (2*x2*(d2^2*x3 - d2*((- d2^2 + x3^2 - 2*x3*x4 + x4^2 + y3^2 - 2*y3*y4 + y4^2)*(- d2^2 + x3^2 - 2*x3*x4 + x4^2 + 4*y^2 - 4*y*y3 - 4*y*y4 + y3^2 + 2*y3*y4 + y4^2))^(1/2) + d2^2*x4 + x3*x4^2 + x3^2*x4 - x3*y3^2 + x3*y4^2 + x4*y3^2 - x4*y4^2 - x3^3 - x4^3 + 2*x3*y*y3 - 2*x3*y*y4 - 2*x4*y*y3 + 2*x4*y*y4))/(2*d2^2 - 2*x3^2 + 4*x3*x4 - 2*x4^2))^(1/2) + d1^2 + x2^2 - y1^2 + y2^2 - (2*x2*(d2^2*x3 - d2*((- d2^2 + x3^2 - 2*x3*x4 + x4^2 + y3^2 - 2*y3*y4 + y4^2)*(- d2^2 + x3^2 - 2*x3*x4 + x4^2 + 4*y^2 - 4*y*y3 - 4*y*y4 + y3^2 + 2*y3*y4 + y4^2))^(1/2) + d2^2*x4 + x3*x4^2 + x3^2*x4 - x3*y3^2 + x3*y4^2 + x4*y3^2 - x4*y4^2 - x3^3 - x4^3 + 2*x3*y*y3 - 2*x3*y*y4 - 2*x4*y*y3 + 2*x4*y*y4))/(2*d2^2 - 2*x3^2 + 4*x3*x4 - 2*x4^2))^(1/2)
 